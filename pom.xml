<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <!-- POM file generated with GWT webAppCreator -->
    <modelVersion>4.0.0</modelVersion>
    <groupId>net.shian5.app</groupId>
    <artifactId>shooter</artifactId>
    <packaging>war</packaging>
    <version>1.0-SNAPSHOT</version>
    <name>net.shian5.app.shooter</name>

    <properties>
        <!-- Convenience property to set the GWT version -->
        <gwtVersion>2.7.0</gwtVersion>
        <!-- Note: GWT needs at least java 1.6 -->
        <maven.compiler.source>1.7</maven.compiler.source>
        <maven.compiler.target>1.7</maven.compiler.target>
        <!-- GAE version -->
        <gaeVersion>1.9.27</gaeVersion>
        <datanucleusVersion>1.1.5</datanucleusVersion>
        <webappDirectory>${project.build.directory}/${project.build.finalName}</webappDirectory>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <repositories>
        <!-- In Project repository -->
        <repository>
            <id>in-project</id>
            <name>In Project Repo</name>
            <url>file://${project.basedir}/libs</url>
        </repository>
    </repositories>

    <dependencyManagement>
        <dependencies>
            <!-- ensure all GWT deps use the same version (unless overridden) -->
            <dependency>
                <groupId>com.google.gwt</groupId>
                <artifactId>gwt</artifactId>
                <version>${gwtVersion}</version>
                <scope>import</scope>
                <type>pom</type>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <!-- GWT -->
        <dependency>
            <groupId>com.google.gwt</groupId>
            <artifactId>gwt-servlet</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>com.google.gwt</groupId>
            <artifactId>gwt-user</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>com.google.gwt</groupId>
            <artifactId>gwt-dev</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>com.google.gwt</groupId>
            <artifactId>gwt-codeserver</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>
        <!-- Google App Engine libraries -->
        <dependency>
            <!-- this library provides the core appengine features -->
            <groupId>com.google.appengine</groupId>
            <artifactId>appengine-api-1.0-sdk</artifactId>
            <version>${gaeVersion}</version>
        </dependency>
        <dependency>
            <!-- this library provides experimental appengine features -->
            <groupId>com.google.appengine</groupId>
            <artifactId>appengine-api-labs</artifactId>
            <version>${gaeVersion}</version>
        </dependency>
        <dependency>
            <!-- required for app engine based unit tests -->
            <groupId>com.google.appengine</groupId>
            <artifactId>appengine-testing</artifactId>
            <version>${gaeVersion}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <!-- required for app engine based unit tests -->
            <groupId>com.google.appengine</groupId>
            <artifactId>appengine-api-stubs</artifactId>
            <version>${gaeVersion}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <!-- required for app engine based unit tests -->
            <groupId>com.google.appengine</groupId>
            <artifactId>appengine-tools-sdk</artifactId>
            <version>${gaeVersion}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <!-- Google App Engine supports both JPA1 and JPA2.
                 JPA1: datanucleus appengine plugin v1 (1.0.10) + datanucleus v1 (1.1.5)
                 JPA2: datanucleus appengine plugin v2 (2.1.1) + datanucleus v3 (3.1.1) -->
            <groupId>com.google.appengine.orm</groupId>
            <artifactId>datanucleus-appengine</artifactId>
            <version>1.0.10</version>
        </dependency>
        <dependency>
            <!-- datanucleus-core is not needed for compilation. in fact, it cannot have compile
                 scope because the datanucleus plugin automatically adds it during enhancement and complains
                 if there are two copies. app should not depend on any classes in this lib anyways. -->
            <groupId>org.datanucleus</groupId>
            <artifactId>datanucleus-core</artifactId>
            <version>${datanucleusVersion}</version>
            <scope>runtime</scope>
            <exclusions>
                <exclusion>
                    <groupId>javax.transaction</groupId>
                    <artifactId>transaction-api</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <!-- datanucleus-jpa is needed during compilation for its
                 @Extension annotation which is used throughout entity classes -->
            <groupId>org.datanucleus</groupId>
            <artifactId>datanucleus-jpa</artifactId>
            <version>${datanucleusVersion}</version>
        </dependency>
        <dependency>
            <!-- normally this library is only needed when using JDO however datanucleus throws
                 some JDO exceptions even when using JPA. there are several places in our code that
                 explicitly catch these JDO exceptions therefore it is needed during compilation -->
            <groupId>javax.jdo</groupId>
            <artifactId>jdo2-api</artifactId>
            <version>2.3-eb</version>
            <exclusions>
                <exclusion>
                    <groupId>javax.transaction</groupId>
                    <artifactId>transaction-api</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- End Google App Engine libraries -->
        <dependency>
            <groupId>gf</groupId>
            <artifactId>gf-gwtChannel</artifactId>
            <version>0.1</version>
        </dependency>
    </dependencies>

    <build>
        <!-- Compiled java classes and all the resources get dumped into
             target/${webappDirectory}/WEB-INF/classes during the build -->
        <outputDirectory>${webappDirectory}/WEB-INF/classes</outputDirectory>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
            </resource>
            <resource>
                <!-- the java source files must be on the classpath during gwt:compile -->
                <directory>src/main/java</directory>
            </resource>
            <resource>
                <!-- the java source files that override/emulate server-side classes
                     in the client must be on the classpath during gwt:compile -->
                <directory>src/main/super</directory>
            </resource>
        </resources>
        <testResources>
            <testResource>
                <directory>src/test/resources</directory>
            </testResource>
        </testResources>

        <plugins>

            <!-- GWT Maven Plugin-->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>gwt-maven-plugin</artifactId>
                <version>${gwtVersion}</version>
                <executions>
                    <execution>
                        <!-- gwt:compile happens just before package phase -->
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                    </execution>
                    <execution>
                        <!-- Run tests through gwt:test, this allows reusing the plugin configuration for GWTTestCases -->
                        <id>gwt-tests</id>
                        <phase>test</phase>
                        <goals>
                            <goal>test</goal>
                        </goals>
                    </execution>
                </executions>
                <!-- Plugin configuration. There are many available options,
                     see gwt-maven-plugin documentation at codehaus.org -->
                <configuration>
                    <modules>
                        <module>net.shian5.app.shooter</module>
                    </modules>
                    <!-- URL that should be opened by DevMode (gwt:run). -->
                    <runTarget>shooter.html</runTarget>
                    <!-- Ask GWT to create the Story of Your Compile (SOYC) (gwt:compile) -->
                    <compileReport>true</compileReport>
                    <!-- Run tests using HtmlUnit -->
                    <mode>htmlunit</mode>
                    <!-- Tests patterns -->
                    <includes>**/Test*.java,**/*Test.java,**/*TestCase.java</includes>
                    <!-- using GAE -->
                    <appEngineVersion>${gaeVersion}</appEngineVersion>
                    <!-- tell the gwt plugin that the webapp source resides in src/Main/webapp -->
                    <webappDirectory>${webappDirectory}</webappDirectory>
                    <!-- tell the gwt plugin that dev mode should be run using the webapp that resides in target/${webappDirectory} -->
                    <hostedWebapp>${webappDirectory}</hostedWebapp>
                    <!-- Normally the gwt maven plugin executes dev mode using a builtin jetty server.
                         This config property instructs the gwt maven plugin to execute dev mode using the
                         jetty server supplied by the appengine sdk. -->
                    <server>com.google.appengine.tools.development.gwt.AppEngineLauncher</server>
                    <bindAddress>0.0.0.0</bindAddress>
                </configuration>
            </plugin>

            <!-- Skip normal test execution, we use gwt:test instead -->
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.17</version>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>

            <!-- Google Appengine Maven plugin -->
            <plugin>
                <groupId>com.google.appengine</groupId>
                <artifactId>appengine-maven-plugin</artifactId>
                <version>1.9.27</version>
                <configuration>
                    <enableJarSplitting>true</enableJarSplitting>
                </configuration>
            </plugin>

            <!-- NOTE: this is only needed if you use "mvn eclipse:eclipse". -->
            <!-- You can remove this plugin if you intend to only use the Maven integration in Eclipse, or another IDE -->
            <plugin>
                <artifactId>maven-eclipse-plugin</artifactId>
                <version>2.7</version>
                <!--  Note 2.8 does not work with AspectJ aspect path -->
                <configuration>
                    <downloadSources>true</downloadSources>
                    <downloadJavadocs>false</downloadJavadocs>
                    <wtpversion>2.0</wtpversion>
                    <additionalBuildcommands>
                        <buildCommand>
                            <name>com.google.gwt.eclipse.core.gwtProjectValidator</name>
                        </buildCommand>
                    </additionalBuildcommands>
                    <additionalProjectnatures>
                        <projectnature>com.google.gwt.eclipse.core.gwtNature</projectnature>
                    </additionalProjectnatures>
                </configuration>
            </plugin>
            <plugin>
                <!-- Copies static web files from src/Main/webapp to target/${webappDirectory} -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>2.1.1</version>
                <executions>
                    <execution>
                        <!-- the exploded goal gets executed during compile phase -->
                        <phase>compile</phase>
                        <goals>
                            <goal>exploded</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <!-- the exploded war structure ends up in target/${webappDirectory} -->
                    <webappDirectory>${webappDirectory}</webappDirectory>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
